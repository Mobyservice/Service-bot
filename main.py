import logging
import os
import json
import gspread
from aiogram import Bot, Dispatcher, executor, types
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_CREDENTIALS = json.loads(os.getenv("GOOGLE_CREDENTIALS", "{}"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_CREDENTIALS, scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –∏ –∑–∞–∫–∞–∑–æ–≤.")

@dp.message_handler(commands=["stock"])
async def stock_cmd(message: types.Message):
    try:
        data = sheet.get_all_records()
        if not data:
            await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø—É—Å—Ç.")
            return
        text = "\n".join([f"{row['–ù–∞–∑–≤–∞–Ω–∏–µ']}: {row['–û—Å—Ç–∞—Ç–æ–∫']}" for row in data])
        await message.answer(f"üì¶ –û—Å—Ç–∞—Ç–∫–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π:\n{text}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

@dp.message_handler(commands=["help"])
async def help_cmd(message: types.Message):
    await message.answer(
        "/start ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/stock ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π\n"
        "/help ‚Äî –ü–æ–º–æ—â—å"
    )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)